worker_processes auto;

events {
    worker_connections 1024;
}

http {
    upstream leaderboard_servers {

        # Consistent hash based on gameId
        # Ensures requests for the same gameId go to the same container
        # The hash function is used to determine which server to route the request to.
        # Note that this a tradeoff to maximize the in-memory leaderboard reads for the given gameId.
         
        # TODO Popular games are anyways going to be read from a redis cache, which is outside of the app.
        # So, popular games can have a regular least-loaded load balancing strategy 

        hash $gameId consistent;  
        server leaderboard-1:3000;
        server leaderboard-2:3000;
    }

    server {
        listen 80;
        # Capture gameId and handle other routes
        location ~ ^/v1/leaderboard/(?<gameId>[0-9a-zA-Z_-]+)(?:/(?<extraPath>.*))?$ {
            # Check for Authorization header with a Bearer token.
            # Additionally, can also validate the token here - but leaving it to the application for flexibility.
            # This is a simple check for the presence of the Authorization header.
            default_type application/json;
            if ($http_authorization !~* ^Bearer\s+\S+) {
                return 403 '{"error": "Forbidden", "message": "Invalid or missing Authorization header"}';
            }

            proxy_pass http://leaderboard_servers;
            proxy_set_header Host $host;
        }
    }
}